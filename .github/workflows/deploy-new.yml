name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build TypeScript
        run: npm run build

      - name: Package Lambda functions
        run: |
          mkdir -p dist/lambdas
          cd dist

          # Package scheduler function
          cp -r ../node_modules ./ 2>/dev/null || true
          zip -r lambdas/scheduler.zip . -x "lambdas/*"

          # Package scraper function
          zip -r lambdas/scraper.zip . -x "lambdas/*"

          # Package notifier function
          zip -r lambdas/notifier.zip . -x "lambdas/*"

          ls -la lambdas/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: infrastructure
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: infrastructure
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment || 'production' }}
        run: terraform apply -auto-approve

      - name: Update configuration
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -n "${{ vars.SCRAPERS_CONFIG }}" ]; then
            echo '${{ vars.SCRAPERS_CONFIG }}' > /tmp/config.json
            aws ssm put-parameter \
              --name "/peddler/${{ github.event.inputs.environment || 'production' }}/config" \
              --value file:///tmp/config.json \
              --type String \
              --overwrite
          fi

      - name: Update secrets
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -n "${{ secrets.PEDDLER_SECRETS }}" ]; then
            aws secretsmanager update-secret \
              --secret-id "peddler/${{ github.event.inputs.environment || 'production' }}/secrets" \
              --secret-string '${{ secrets.PEDDLER_SECRETS }}'
          fi
